// Generated by CoffeeScript 1.6.3
/*

  tell

  2013 (c) Andrey Popp <8mayday@gmail.com>
*/

var Stack, asPromise, createServer, http, reject, resolve, stack, toHandler, _ref,
  __slice = [].slice;

http = require('http');

_ref = require('kew'), resolve = _ref.resolve, reject = _ref.reject;

createServer = function(handler) {
  return http.createServer(function(req, res) {
    return handler(null, req, res, resolve).then(function() {
      return res.end().end();
    });
  });
};

asPromise = function() {
  var args, err, func;
  func = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  try {
    return resolve(func.apply(null, args));
  } catch (_error) {
    err = _error;
    return reject(err);
  }
};

toHandler = function(h) {
  if (h.toHandler != null) {
    return h.toHandler();
  } else {
    return h;
  }
};

Stack = (function() {
  function Stack(handlers) {
    if (handlers == null) {
      handlers = [];
    }
    this.handlers = handlers;
  }

  Stack.prototype.use = function(handler) {
    this.handlers.push({
      onSuccess: toHandler(handler)
    });
    return this;
  };

  Stack.prototype["catch"] = function(handler) {
    this.handlers.push({
      onError: toHandler(handler)
    });
    return this;
  };

  Stack.prototype.listen = function() {
    var args, _ref1;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return (_ref1 = createServer(this.toHandler())).listen.apply(_ref1, args);
  };

  Stack.prototype.toHandler = function() {
    return this.handle.bind(this);
  };

  Stack.prototype.handle = function(err, req, res, next) {
    var handlers, nextHandler, process;
    handlers = this.handlers.slice(0);
    nextHandler = function(name) {
      var handler;
      while (handlers.length > 0) {
        handler = handlers.shift();
        if (handler[name]) {
          return handler[name];
        }
      }
    };
    process = function(err, result) {
      var callNext, handled, handler, nextIsCalled;
      nextIsCalled = false;
      callNext = function(err, result) {
        nextIsCalled = true;
        return process(err, result);
      };
      handler = nextHandler(err ? 'onError' : 'onSuccess');
      if (!handler) {
        if (next != null) {
          return asPromise(next, err, result);
        } else {
          if (err) {
            return reject(err);
          } else {
            return resolve(result);
          }
        }
      } else {
        handled = handler.length === 4 ? asPromise(handler, err, req, res, callNext) : asPromise(handler, req, res, callNext);
        return handled.then(function(result) {
          if (nextIsCalled) {
            return result;
          } else {
            return callNext(null, result);
          }
        }).fail(function(err) {
          if (nextIsCalled) {
            throw err;
          } else {
            return callNext(err);
          }
        });
      }
    };
    return process(err);
  };

  return Stack;

})();

stack = function() {
  return new Stack;
};

module.exports = {
  createServer: createServer,
  Stack: Stack,
  stack: stack
};
