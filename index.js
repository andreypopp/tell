// Generated by CoffeeScript 1.6.3
/*

  tell

  2013 (c) Andrey Popp <8mayday@gmail.com>
*/

var Tell, asPromise, createServer, http, k, makeURIPrefixRe, makeURIRe, overlay, reject, resolve, toHandler, v, _ref, _ref1,
  __slice = [].slice;

http = require('http');

_ref = require('kew'), resolve = _ref.resolve, reject = _ref.reject;

createServer = function(handler) {
  return http.createServer(function(req, res) {
    return handler(null, req, res, resolve).then(function() {
      return res.end().end();
    });
  });
};

asPromise = function() {
  var args, err, func;
  func = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  try {
    return resolve(func.apply(null, args));
  } catch (_error) {
    err = _error;
    return reject(err);
  }
};

toHandler = function(h) {
  if (h.toHandler != null) {
    return h.toHandler();
  } else {
    return h;
  }
};

makeURIPrefixRe = function(pattern) {
  if (pattern) {
    if (pattern[0] !== '/') {
      pattern = "/" + pattern;
    }
    return RegExp("^" + pattern + "(/|$)");
  }
};

makeURIRe = function(pattern) {
  if (pattern) {
    if (pattern[0] !== '/') {
      pattern = "/" + pattern;
    }
    return RegExp("^" + pattern + "$");
  }
};

overlay = function(obj, attrs) {
  var k, newObj, v;
  newObj = Object.create(obj);
  for (k in attrs) {
    v = attrs[k];
    newObj[k] = v;
  }
  return newObj;
};

Tell = (function() {
  var method, _fn, _i, _len, _ref1,
    _this = this;

  function Tell(handlers) {
    if (handlers == null) {
      handlers = [];
    }
    this.handlers = handlers;
  }

  Tell.prototype.use = function(prefix, handler) {
    if (handler == null) {
      handler = prefix;
      prefix = void 0;
    }
    this.handlers.push({
      pattern: makeURIPrefixRe(prefix),
      onSuccess: toHandler(handler)
    });
    return this;
  };

  Tell.prototype["catch"] = function(handler) {
    this.handlers.push({
      onError: toHandler(handler)
    });
    return this;
  };

  _ref1 = ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS', 'LINK', 'UNLINK'];
  _fn = function(method) {
    return Tell.prototype[method.toLowerCase()] = function(pattern, handler) {
      if (!(pattern instanceof RegExp)) {
        pattern = makeURIRe(pattern);
      }
      this.handlers.push({
        pattern: pattern,
        method: method,
        onSuccess: handler,
        originalReq: true
      });
      return this;
    };
  };
  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
    method = _ref1[_i];
    _fn(method);
  }

  Tell.prototype.listen = function() {
    var args, _ref2;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return (_ref2 = createServer(this.toHandler())).listen.apply(_ref2, args);
  };

  Tell.prototype.toHandler = function() {
    return this.handle.bind(this);
  };

  Tell.prototype.matchTarget = function(target, req, options) {
    var m, newUrl;
    if (options.pattern) {
      m = options.pattern.exec(req.url);
      if (!m) {
        return;
      }
      if (!options.originalReq) {
        newUrl = req.url.substring(m[0].length);
        if (newUrl[0] !== '/') {
          newUrl = "/" + newUrl;
        }
        req = overlay(req, {
          url: newUrl
        });
      }
    }
    if (options.method) {
      if (req.method !== options.method) {
        return;
      }
    }
    return {
      target: target,
      localReq: req
    };
  };

  Tell.prototype.handle = function(err, req, res, next) {
    var findHandler, handlers, process,
      _this = this;
    handlers = this.handlers.slice(0);
    findHandler = function(name, req) {
      var handler, match, target;
      while (handlers.length > 0) {
        handler = handlers.shift();
        target = handler[name];
        if (!target) {
          return;
        }
        match = _this.matchTarget(target, req, handler);
        if (match != null) {
          return match;
        }
      }
    };
    process = function(err, result) {
      var callNext, handled, handler, handlerName, localReq, nextIsCalled, target;
      nextIsCalled = false;
      callNext = function(err, result) {
        nextIsCalled = true;
        return process(err, result);
      };
      handlerName = err ? 'onError' : 'onSuccess';
      handler = findHandler(handlerName, req);
      if (!handler) {
        if (next != null) {
          return asPromise(next, err, result);
        } else {
          if (err) {
            return reject(err);
          } else {
            return resolve(result);
          }
        }
      } else {
        target = handler.target, localReq = handler.localReq;
        handled = target.length === 4 ? asPromise(target, err, localReq, res, callNext) : asPromise(target, localReq, res, callNext);
        return handled.then(function(result) {
          if (nextIsCalled) {
            return result;
          } else {
            return callNext(null, result);
          }
        }).fail(function(err) {
          if (nextIsCalled) {
            throw err;
          } else {
            return callNext(err);
          }
        });
      }
    };
    return process(err);
  };

  return Tell;

}).call(this);

module.exports = function() {
  return new Tell;
};

_ref1 = {
  createServer: createServer,
  Tell: Tell
};
for (k in _ref1) {
  v = _ref1[k];
  module.exports[k] = v;
}
