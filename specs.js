// Generated by CoffeeScript 1.6.3
/*

  tell specs

  2013 (c) Andrey Popp <8mayday@gmail.com>
*/

var eq, ok, reject, resolve, tell, throws, throwsFlip, _ref, _ref1;

_ref = require('kew'), resolve = _ref.resolve, reject = _ref.reject;

_ref1 = require('assert'), ok = _ref1.ok, throwsFlip = _ref1.throws, eq = _ref1.equal;

tell = require('./index');

throws = function(error, block) {
  return throwsFlip(block, error);
};

describe('Stack', function() {
  it('works as a middleware stack', function(done) {
    var app, trace;
    trace = [];
    app = tell.stack().use(function(req, res, next) {
      eq(req, 1);
      eq(res, 2);
      trace.push(0);
      return next();
    }).use(function(req, res, next) {
      eq(req, 1);
      eq(res, 2);
      trace.push(1);
      return 'ok';
    });
    return app.handle(null, 1, 2).then(function(res) {
      eq(res, 'ok');
      eq(trace.length, 2);
      eq(trace[0], 0);
      return eq(trace[1], 1);
    }).then(done).end();
  });
  it('automatically calls next handler if no explicit call was made', function(done) {
    var app, trace;
    trace = [];
    app = tell.stack().use(function(req, res, next) {
      eq(req, 1);
      eq(res, 2);
      return trace.push(0);
    }).use(function(req, res, next) {
      eq(req, 1);
      eq(res, 2);
      trace.push(1);
      return 'ok';
    });
    return app.handle(null, 1, 2).then(function(res) {
      eq(res, 'ok');
      eq(trace.length, 2);
      eq(trace[0], 0);
      return eq(trace[1], 1);
    }).then(done).end();
  });
  it('handles empty stack', function(done) {
    var app;
    app = tell.stack();
    return app.handle(null).then(function(res) {
      return eq(res, void 0);
    }).then(done).end();
  });
  it('allows delegating to sub-stacks', function(done) {
    var app, trace;
    trace = [];
    app = tell.stack().use(function(req, res, next) {
      eq(req, 1);
      eq(res, 2);
      return trace.push(0);
    }).use(tell.stack().use(function(req, res, next) {
      eq(req, 1);
      eq(res, 2);
      return trace.push(1);
    }).use(function(req, res, next) {
      eq(req, 1);
      eq(res, 2);
      trace.push(2);
      return 'ok';
    }));
    return app.handle(null, 1, 2).then(function(res) {
      eq(res, 'ok');
      eq(trace.length, 3);
      eq(trace[0], 0);
      eq(trace[1], 1);
      return eq(trace[2], 2);
    }).then(done).end();
  });
  it('propagates thrown error to top level', function() {
    var app;
    app = tell.stack().use(function(req, res, next) {
      throw new Error('error');
    });
    return throws(Error, function() {
      return app.handle(null).fail(function(err) {
        ok(err);
        throw err;
      }).end();
    });
  });
  it('propagates rejected promise to top level', function() {
    var app;
    app = tell.stack().use(function(req, res, next) {
      return reject(new Error('error'));
    });
    return throws(Error, function() {
      return app.handle(null).fail(function(err) {
        ok(err);
        throw err;
      }).end();
    });
  });
  it('propagates passed error to top level', function() {
    var app;
    app = tell.stack().use(function(req, res, next) {
      return next(new Error('error'));
    });
    return throws(Error, function() {
      return app.handle(null).fail(function(err) {
        ok(err);
        throw err;
      }).end();
    });
  });
  it('catches thrown error with a handler', function(done) {
    var app, trace;
    trace = [];
    app = tell.stack().use(function(req, res, next) {
      throw new Error('error');
    })["catch"](function(err, req, res, next) {
      eq(req, 1);
      eq(res, 2);
      ok(err);
      return trace.push(1);
    }).use(function(req, res, next) {
      eq(req, 1);
      eq(res, 2);
      trace.push(2);
      return 'ok';
    });
    return app.handle(null, 1, 2).then(function(res) {
      eq(res, 'ok');
      return eq(trace.length, 2);
    }).then(done).end();
  });
  it('catches rejected promise with a handler', function(done) {
    var app, trace;
    trace = [];
    app = tell.stack().use(function(req, res, next) {
      return reject(new Error('error'));
    })["catch"](function(err, req, res, next) {
      eq(req, 1);
      eq(res, 2);
      ok(err);
      return trace.push(1);
    }).use(function(req, res, next) {
      eq(req, 1);
      eq(res, 2);
      trace.push(2);
      return 'ok';
    });
    return app.handle(null, 1, 2).then(function(res) {
      eq(res, 'ok');
      return eq(trace.length, 2);
    }).then(done).end();
  });
  it('catches passed error with a handler', function(done) {
    var app, trace;
    trace = [];
    app = tell.stack().use(function(req, res, next) {
      return next(new Error('error'));
    })["catch"](function(err, req, res, next) {
      eq(req, 1);
      eq(res, 2);
      ok(err);
      return trace.push(1);
    }).use(function(req, res, next) {
      eq(req, 1);
      eq(res, 2);
      trace.push(2);
      return 'ok';
    });
    return app.handle(null, 1, 2).then(function(res) {
      eq(res, 'ok');
      return eq(trace.length, 2);
    }).then(done).end();
  });
  it('propagates re-thrown error', function() {
    var app, trace;
    trace = [];
    app = tell.stack().use(function(req, res, next) {
      throw new Error('error');
    })["catch"](function(err, req, res, next) {
      ok(err);
      trace.push(1);
      throw err;
    });
    return throws(Error, function() {
      return app.handle(null, 1, 2).fail(function(err) {
        ok(err);
        eq(trace.length, 1);
        throw err;
      }).end();
    });
  });
  it('propagates re-rejected promise', function() {
    var app, trace;
    trace = [];
    app = tell.stack().use(function(req, res, next) {
      return reject(new Error('error'));
    })["catch"](function(err, req, res, next) {
      ok(err);
      trace.push(1);
      return reject(err);
    });
    return throws(Error, function() {
      return app.handle(null).fail(function(err) {
        ok(err);
        eq(trace.length, 1);
        throw err;
      }).end();
    });
  });
  return it('propagates re-passed error', function() {
    var app, trace;
    trace = [];
    app = tell.stack().use(function(req, res, next) {
      return next(new Error('error'));
    })["catch"](function(err, req, res, next) {
      ok(err);
      trace.push(1);
      return next(err);
    });
    return throws(Error, function() {
      return app.handle(null).fail(function(err) {
        ok(err);
        eq(trace.length, 1);
        throw err;
      }).end();
    });
  });
});
